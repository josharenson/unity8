import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable HudClient 0.1 tests/mocks'

Module {
    Component {
        name: "DeeListModel"
        prototype: "QAbstractListModel"
        Property { name: "name"; type: "string" }
        Property { name: "synchronized"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "nameChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "synchronizedChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "roleNamesChanged"
            Parameter { type: "QHash<int,QByteArray>" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "count"; type: "int" }
    }
    Component {
        name: "HudClient"
        prototype: "QObject"
        exports: ["HudClient/HudClient 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "results"; type: "DeeListModel"; isReadonly: true; isPointer: true }
        Property { name: "toolBarModel"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Signal { name: "voiceQueryLoading" }
        Signal { name: "voiceQueryListening" }
        Signal { name: "voiceQueryHeardSomething" }
        Signal { name: "voiceQueryFailed" }
        Signal {
            name: "voiceQueryFinished"
            Parameter { name: "query"; type: "string" }
        }
        Signal { name: "commandExecuted" }
        Signal {
            name: "showParametrizedAction"
            Parameter { name: "action"; type: "string" }
            Parameter { name: "items"; type: "QVariant" }
        }
        Method {
            name: "executeCommand"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setQuery"
            Parameter { name: "new_query"; type: "string" }
        }
        Method { name: "startVoiceQuery" }
        Method {
            name: "executeParametrizedAction"
            Parameter { name: "values"; type: "QVariant" }
        }
        Method {
            name: "updateParametrizedAction"
            Parameter { name: "values"; type: "QVariant" }
        }
        Method { name: "cancelParametrizedAction" }
        Method {
            name: "executeToolBarAction"
            Parameter { name: "action"; type: "HudClientQueryToolbarItems" }
        }
    }
    Component {
        name: "HudClientStub"
        prototype: "QObject"
        exports: ["HudClient/HudClientStub 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "lastExecutedToolbarItem"; type: "int"; isReadonly: true }
        Property { name: "lastSetQuery"; type: "string"; isReadonly: true }
        Property { name: "lastExecutedCommandRow"; type: "int"; isReadonly: true }
        Property { name: "lastExecutedParametrizedCommandRow"; type: "int"; isReadonly: true }
        Property { name: "lastParametrizedCommandCommited"; type: "bool"; isReadonly: true }
        Property { name: "activatedActions"; type: "QVariantMap"; isReadonly: true }
        Method { name: "reset" }
        Method { name: "fullScreenToolbarItemValue"; type: "int" }
        Method { name: "helpToolbarItemValue"; type: "int" }
        Method { name: "preferencesToolbarItemValue"; type: "int" }
        Method { name: "undoToolbarItemValue"; type: "int" }
        Method {
            name: "setHelpToolbarItemEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component { name: "HudToolBarModel"; prototype: "QAbstractListModel" }
    Component {
        name: "VolumePeakDetector"
        prototype: "QObject"
        exports: ["HudClient/VolumePeakDetector 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool" }
        Property { name: "desiredInterval"; type: "int" }
        Signal {
            name: "newPeak"
            Parameter { name: "volume"; type: "float" }
        }
    }
}
