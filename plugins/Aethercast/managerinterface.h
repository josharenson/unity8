/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p managerinterface -c ManagerInterface org.aethercast.xml org.aethercast.Manager
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MANAGERINTERFACE_H
#define MANAGERINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.aethercast.Manager
 */
class ManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.aethercast.Manager"; }

public:
    ManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ManagerInterface();

    Q_PROPERTY(QStringList Capabilities READ capabilities)
    inline QStringList capabilities() const
    { return qvariant_cast< QStringList >(property("Capabilities")); }

    Q_PROPERTY(bool Scanning READ scanning)
    inline bool scanning() const
    { return qvariant_cast< bool >(property("Scanning")); }

    Q_PROPERTY(QString State READ state)
    inline QString state() const
    { return qvariant_cast< QString >(property("State")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> RegisterInputProvider(const QDBusObjectPath &path, const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("RegisterInputProvider"), argumentList);
    }

    inline QDBusPendingReply<> RegisterMediaManager(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("RegisterMediaManager"), argumentList);
    }

    inline QDBusPendingReply<> Scan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Scan"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterInputProvider(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("UnregisterInputProvider"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterMediaManager(const QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QStringLiteral("UnregisterMediaManager"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace aethercast {
    typedef ::ManagerInterface Manager;
  }
}
#endif
