import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Ubuntu.Gestures 0.1 plugins'

Module {
    Component {
        name: "AxisVelocityCalculator"
        prototype: "QObject"
        exports: ["Ubuntu.Gestures/AxisVelocityCalculator 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "trackedPosition"; type: "double" }
        Signal {
            name: "trackedPositionChanged"
            Parameter { name: "value"; type: "double" }
        }
        Method { name: "calculate"; type: "double" }
        Method { name: "reset" }
    }
    Component {
        name: "Direction"
        prototype: "QObject"
        exports: ["Ubuntu.Gestures/Direction 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Rightwards": 0,
                "Leftwards": 1,
                "Downwards": 2,
                "Upwards": 3,
                "Horizontal": 4,
                "Vertical": 5
            }
        }
        Method {
            name: "isHorizontal"
            type: "bool"
            Parameter { name: "type"; type: "Direction::Type" }
        }
        Method {
            name: "isVertical"
            type: "bool"
            Parameter { name: "type"; type: "Direction::Type" }
        }
        Method {
            name: "isPositive"
            type: "bool"
            Parameter { name: "type"; type: "Direction::Type" }
        }
    }
    Component {
        name: "DirectionalDragArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Ubuntu.Gestures/DirectionalDragArea 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "direction"; type: "Direction::Type" }
        Property { name: "distance"; type: "double"; isReadonly: true }
        Property { name: "sceneDistance"; type: "double"; isReadonly: true }
        Property { name: "touchX"; type: "double"; isReadonly: true }
        Property { name: "touchY"; type: "double"; isReadonly: true }
        Property { name: "touchSceneX"; type: "double"; isReadonly: true }
        Property { name: "touchSceneY"; type: "double"; isReadonly: true }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "immediateRecognition"; type: "bool" }
        Signal {
            name: "directionChanged"
            Parameter { name: "direction"; type: "Direction::Type" }
        }
        Signal {
            name: "draggingChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "pressedChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "distanceChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "sceneDistanceChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "touchXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "touchYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "touchSceneXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "touchSceneYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "immediateRecognitionChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "removeTimeConstraints" }
    }
    Component {
        name: "FloatingFlickable"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Ubuntu.Gestures/FloatingFlickable 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "contentWidth"; type: "double" }
        Property { name: "contentHeight"; type: "double" }
        Property { name: "contentX"; type: "double" }
        Property { name: "contentY"; type: "double" }
        Property { name: "direction"; type: "Direction::Type" }
    }
    Component {
        name: "GestureTouchPoint"
        prototype: "QObject"
        exports: ["Ubuntu.Gestures/GestureTouchPoint 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "pointId"; type: "int"; isReadonly: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "x"; type: "double"; isReadonly: true }
        Property { name: "y"; type: "double"; isReadonly: true }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "PressedOutsideNotifier"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Ubuntu.Gestures/PressedOutsideNotifier 0.1"]
        exportMetaObjectRevisions: [0]
        Signal { name: "pressedOutside" }
    }
    Component {
        name: "TouchGate"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Ubuntu.Gestures/TouchGate 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "targetItem"; type: "QQuickItem"; isPointer: true }
        Signal {
            name: "targetItemChanged"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
    }
    Component {
        name: "TouchGestureArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Ubuntu.Gestures/TouchGestureArea 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "WaitingForTouch": 0,
                "Undecided": 1,
                "Recognized": 2,
                "Rejected": 3
            }
        }
        Property { name: "touchPoints"; type: "GestureTouchPoint"; isList: true; isReadonly: true }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
        Property { name: "minimumTouchPoints"; type: "int" }
        Property { name: "maximumTouchPoints"; type: "int" }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Status" }
        }
        Signal { name: "touchPointsUpdated" }
        Signal {
            name: "draggingChanged"
            Parameter { name: "dragging"; type: "bool" }
        }
        Signal {
            name: "minimumTouchPointsChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "maximumTouchPointsChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "pressed"
            Parameter { name: "points"; type: "QList<QObject*>" }
        }
        Signal {
            name: "released"
            Parameter { name: "points"; type: "QList<QObject*>" }
        }
        Signal {
            name: "updated"
            Parameter { name: "points"; type: "QList<QObject*>" }
        }
        Signal { name: "clicked" }
    }
}
